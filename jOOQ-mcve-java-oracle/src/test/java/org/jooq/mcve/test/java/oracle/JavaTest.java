package org.jooq.mcve.test.java.oracle;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.oracle.tables.records.T3Record;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.*;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy;
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
import org.testcontainers.utility.DockerImageName;
import org.testcontainers.utility.ResourceReaper;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;

import javax.sql.DataSource;

import static org.jooq.mcve.java.oracle.Tables.TEST;
import static org.jooq.mcve.java.oracle.Tables.T3;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger      log = JooqLogger.getLogger(JavaTest.class);
    static OracleContainer db;
    static DataSource      dataSource;
    static DSLContext      ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new OracleContainer(DockerImageName.parse("gvenzl/oracle-free").asCompatibleSubstituteFor("gvenzl/oracle-xe")) {
                @Override
                public String getSid() {
                    return "FREEPDB1";
                };

                @Override
                public String getDatabaseName() {
                    return "FREEPDB1";
                };
            }
                .withUsername("MCVE")
                .withPassword("MCVE")
                .withEnv("ORACLE_PASSWORD", "MCVE")
                .withEnv("APP_USER", "MCVE")
                .withEnv("APP_USER_PASSWORD", "MCVE")
                .waitingFor(new WaitAllStrategy()
                    .withStrategy(new LogMessageWaitStrategy()
                        .withRegEx(".*DATABASE IS READY TO USE!.*"))
                    .withStrategy(new HostPortWaitStrategy())
                    .withStartupTimeout(Duration.ofMinutes(5))
                )
                .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");

        HikariConfig config = new HikariConfig();
        config.setJdbcUrl( System.getProperty("jooq.codegen.jdbc.url") );
        config.setUsername(System.getProperty("jooq.codegen.jdbc.username"));
        config.setPassword(System.getProperty("jooq.codegen.jdbc.password"));
        dataSource = new HikariDataSource( config );

        ctx = DSL.using(dataSource, SQLDialect.ORACLE);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = dataSource.getConnection().createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.CD)
               .values(42)
               .execute()
        );

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record.getId());
    }

    @Test
    public void testConfiguration() {
        T3Record t3Rec = ctx.transactionResult(cfg -> {
            return cfg.dsl().insertInto( T3 )
                                .columns(T3.CONTENT)
                                .values("AValue")
                                .returning()
                                .fetchOne();
        } );

        t3Rec.setContent( "An updated value!" );
        t3Rec.update();
    }
}
