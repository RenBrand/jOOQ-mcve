/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.T2Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class T2 extends TableImpl<T2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.T2</code>
     */
    public static final T2 T2 = new T2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<T2Record> getRecordType() {
        return T2Record.class;
    }

    /**
     * The column <code>MCVE.T2.V</code>.
     */
    public final TableField<T2Record, String> V = createField(DSL.name("V"), SQLDataType.CLOB.nullable(false), this, "");

    private T2(Name alias, Table<T2Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private T2(Name alias, Table<T2Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MCVE.T2</code> table reference
     */
    public T2(String alias) {
        this(DSL.name(alias), T2);
    }

    /**
     * Create an aliased <code>MCVE.T2</code> table reference
     */
    public T2(Name alias) {
        this(alias, T2);
    }

    /**
     * Create a <code>MCVE.T2</code> table reference
     */
    public T2() {
        this(DSL.name("T2"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public T2 as(String alias) {
        return new T2(DSL.name(alias), this);
    }

    @Override
    public T2 as(Name alias) {
        return new T2(alias, this);
    }

    @Override
    public T2 as(Table<?> alias) {
        return new T2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public T2 rename(String name) {
        return new T2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public T2 rename(Name name) {
        return new T2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public T2 rename(Table<?> name) {
        return new T2(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 where(Condition condition) {
        return new T2(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T2 where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T2 where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T2 where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T2 where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T2 whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
