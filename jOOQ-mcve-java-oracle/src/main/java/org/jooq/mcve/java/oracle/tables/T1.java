/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import apackage.AnObject;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.T1Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class T1 extends TableImpl<T1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.T1</code>
     */
    public static final T1 T1 = new T1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<T1Record> getRecordType() {
        return T1Record.class;
    }

    /**
     * The column <code>MCVE.T1.ID</code>.
     */
    public final TableField<T1Record, BigDecimal> ID = createField(DSL.name("ID"), SQLDataType.NUMERIC.nullable(false).identity(true), this, "");

    /**
     * The column <code>MCVE.T1.JSON</code>.
     */
    public final TableField<T1Record, AnObject> JSON = createField(DSL.name("JSON"), SQLDataType.CLOB.nullable(false), this, "", new AutoConverter<String, AnObject>(String.class, AnObject.class));

    private T1(Name alias, Table<T1Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private T1(Name alias, Table<T1Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MCVE.T1</code> table reference
     */
    public T1(String alias) {
        this(DSL.name(alias), T1);
    }

    /**
     * Create an aliased <code>MCVE.T1</code> table reference
     */
    public T1(Name alias) {
        this(alias, T1);
    }

    /**
     * Create a <code>MCVE.T1</code> table reference
     */
    public T1() {
        this(DSL.name("T1"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<T1Record, BigDecimal> getIdentity() {
        return (Identity<T1Record, BigDecimal>) super.getIdentity();
    }

    @Override
    public T1 as(String alias) {
        return new T1(DSL.name(alias), this);
    }

    @Override
    public T1 as(Name alias) {
        return new T1(alias, this);
    }

    @Override
    public T1 as(Table<?> alias) {
        return new T1(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public T1 rename(String name) {
        return new T1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public T1 rename(Name name) {
        return new T1(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public T1 rename(Table<?> name) {
        return new T1(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 where(Condition condition) {
        return new T1(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T1 where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T1 where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T1 where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public T1 where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public T1 whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
